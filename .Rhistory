merged_data = merged_data %>% filter(within_range == TRUE)
# Get unique individuals and groups
individuals <- unique(merged_data$reader_pit)
groups <- unique(merged_data$group)
# Initialize the group_matrix with 0
group_matrix <- matrix(0, nrow = length(individuals), ncol = length(groups))
# Iterate through groups and individuals, fill group_matrix based on within_range condition
for (j in 1:length(groups)) {
group_data <- filter(merged_data, group == groups[j], within_range)
for (i in 1:length(individuals)) {
if (any(group_data$reader_pit == individuals[i])) {
group_matrix[i, j] <- 1
}
}
}
# Set row and column names
rownames(group_matrix) <- individuals
colnames(group_matrix) <- groups
group_matrix = t(group_matrix)
adj.m.2023=get_network(group_matrix, association_index="SRI")
assoc.species=graph_from_adjacency_matrix(adj.m.2023, "undirected", weighted=T) #create a graph object
visspecies <- toVisNetworkData(assoc.species )
# Grab nodes data frame.
nodes <- visspecies$nodes
# Grab edges data frame.
edges <- visspecies$edges
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
dplyr:::select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
nodes = left_join(nodes, sex_bz, by = 'id')
# Create color palette.
nodes$color <- ifelse(nodes$sex == 'm', 'blue', 'pink')
nodes = nodes %>%
dplyr:::select(id , label , color)%>%
distinct(id,label,color)
#925560
# Overwrite color column in nodes data frame
# with degree centrality color palette.
#nodes$color <- degreePal
## copy column "weight" to new column "value" in list "edges"
visspecies$edges$value <- visspecies$edges$weight
# Grab edges data frame.
edges <- visspecies$edges
# Plot.
visNetwork(nodes, edges) %>% visEdges(color = list(color = "black"))
#####2023
#set time_window for buffer zone around each read
time_window = 30
#species_list = c("rotundus", "mesoamericanus")
#year_list = c(2023,2024)
speciesa = "rotundus"
year = "2024"
reads_filter = 1
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_site2 , reduced_time, reader_pit) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
dplyr:::select(reader_site2,reader_pit,start,end)
# Merge overlapping rows in the dataframe
species_merged_df <- merge_overlapping_rows(network_data)
species_merged_df$group <- paste0("group_", seq_along(species_merged_df$reader_site2))
species_groups = species_merged_df %>%
dplyr:::select(group , start, end, reader_site2)
#individual data
ind_data = reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_pit,reader_site2, reduced_time,sex)
# Merge the data
merged_data <- merge(species_groups, ind_data, by = "reader_site2", all.x = TRUE)
# Define a function to check if reduced_df falls within the range of start and end
is_in_range <- function(start, end, reduced_time) {
ifelse(is.na(start) | is.na(end) | is.na(reduced_time), FALSE, start <= reduced_time & reduced_time <= end)
}
# Add a logical column indicating if reduced_df falls between start and end
merged_data$within_range <- merged_data$reduced_time >= merged_data$start & merged_data$reduced_time <= merged_data$end
merged_data = merged_data %>% filter(within_range == TRUE)
# Get unique individuals and groups
individuals <- unique(merged_data$reader_pit)
groups <- unique(merged_data$group)
# Initialize the group_matrix with 0
group_matrix <- matrix(0, nrow = length(individuals), ncol = length(groups))
# Iterate through groups and individuals, fill group_matrix based on within_range condition
for (j in 1:length(groups)) {
group_data <- filter(merged_data, group == groups[j], within_range)
for (i in 1:length(individuals)) {
if (any(group_data$reader_pit == individuals[i])) {
group_matrix[i, j] <- 1
}
}
}
# Set row and column names
rownames(group_matrix) <- individuals
colnames(group_matrix) <- groups
group_matrix = t(group_matrix)
adj.m.2023=get_network(group_matrix, association_index="SRI")
assoc.species=graph_from_adjacency_matrix(adj.m.2023, "undirected", weighted=T) #create a graph object
visspecies <- toVisNetworkData(assoc.species )
# Grab nodes data frame.
nodes <- visspecies$nodes
# Grab edges data frame.
edges <- visspecies$edges
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
dplyr:::select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
nodes = left_join(nodes, sex_bz, by = 'id')
# Create color palette.
nodes$color <- ifelse(nodes$sex == 'm', 'blue', 'pink')
nodes = nodes %>%
dplyr:::select(id , label , color)%>%
distinct(id,label,color)
#925560
# Overwrite color column in nodes data frame
# with degree centrality color palette.
#nodes$color <- degreePal
## copy column "weight" to new column "value" in list "edges"
visspecies$edges$value <- visspecies$edges$weight
# Grab edges data frame.
edges <- visspecies$edges
# Plot.
visNetwork(nodes, edges) %>% visEdges(color = list(color = "black"))
#Lagged association rate
#data fromatting
lar_data = merged_data %>%
filter(within_range == TRUE) %>%
distinct(group, reader_site2, start,end ) %>%
mutate(LARtime = end - min(end))
#Lar graph and values
ncol(group_matrix)
## calculate lagged association rate based on previous code chunk
named_vector <- setNames(lar_data$LARtime, lar_data$group)
lagged_rates <- LAR(group_matrix,named_vector,(3600*24))
## plot the results
plot(lagged_rates, type='l', axes=FALSE, xlab="Time (days)", ylab="LAR", ylim=c(0,1))
axis(2)
axis(1, at=lagged_rates[,1], labels=c(1:nrow(lagged_rates)))
ncol(group_matrix)
#############2024
year = "2024"
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
select(reader_site2 , reduced_time, reader_pit,sex) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
select(reader_site2,reader_pit,start,end,sex)
#####2023
#set time_window for buffer zone around each read
time_window = 30
#species_list = c("rotundus", "mesoamericanus")
#year_list = c(2023,2024)
speciesa = "mesoamericanus"
year = "2024"
reads_filter = 1
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_site2 , reduced_time, reader_pit) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
dplyr:::select(reader_site2,reader_pit,start,end)
# Merge overlapping rows in the dataframe
species_merged_df <- merge_overlapping_rows(network_data)
species_merged_df$group <- paste0("group_", seq_along(species_merged_df$reader_site2))
species_groups = species_merged_df %>%
dplyr:::select(group , start, end, reader_site2)
#individual data
ind_data = reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_pit,reader_site2, reduced_time,sex)
# Merge the data
merged_data <- merge(species_groups, ind_data, by = "reader_site2", all.x = TRUE)
# Define a function to check if reduced_df falls within the range of start and end
is_in_range <- function(start, end, reduced_time) {
ifelse(is.na(start) | is.na(end) | is.na(reduced_time), FALSE, start <= reduced_time & reduced_time <= end)
}
# Add a logical column indicating if reduced_df falls between start and end
merged_data$within_range <- merged_data$reduced_time >= merged_data$start & merged_data$reduced_time <= merged_data$end
merged_data = merged_data %>% filter(within_range == TRUE)
# Get unique individuals and groups
individuals <- unique(merged_data$reader_pit)
groups <- unique(merged_data$group)
# Initialize the group_matrix with 0
group_matrix <- matrix(0, nrow = length(individuals), ncol = length(groups))
# Iterate through groups and individuals, fill group_matrix based on within_range condition
for (j in 1:length(groups)) {
group_data <- filter(merged_data, group == groups[j], within_range)
for (i in 1:length(individuals)) {
if (any(group_data$reader_pit == individuals[i])) {
group_matrix[i, j] <- 1
}
}
}
# Set row and column names
rownames(group_matrix) <- individuals
colnames(group_matrix) <- groups
group_matrix = t(group_matrix)
adj.m.2023=get_network(group_matrix, association_index="SRI")
assoc.species=graph_from_adjacency_matrix(adj.m.2023, "undirected", weighted=T) #create a graph object
visspecies <- toVisNetworkData(assoc.species )
# Grab nodes data frame.
nodes <- visspecies$nodes
# Grab edges data frame.
edges <- visspecies$edges
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
dplyr:::select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
nodes = left_join(nodes, sex_bz, by = 'id')
# Create color palette.
nodes$color <- ifelse(nodes$sex == 'm', 'blue', 'pink')
nodes = nodes %>%
dplyr:::select(id , label , color)%>%
distinct(id,label,color)
#925560
# Overwrite color column in nodes data frame
# with degree centrality color palette.
#nodes$color <- degreePal
## copy column "weight" to new column "value" in list "edges"
visspecies$edges$value <- visspecies$edges$weight
# Grab edges data frame.
edges <- visspecies$edges
# Plot.
visNetwork(nodes, edges) %>% visEdges(color = list(color = "black"))
#Lagged association rate
#data fromatting
lar_data = merged_data %>%
filter(within_range == TRUE) %>%
distinct(group, reader_site2, start,end ) %>%
mutate(LARtime = end - min(end))
#Lar graph and values
ncol(group_matrix)
## calculate lagged association rate based on previous code chunk
named_vector <- setNames(lar_data$LARtime, lar_data$group)
lagged_rates <- LAR(group_matrix,named_vector,(3600*24))
## plot the results
plot(lagged_rates, type='l', axes=FALSE, xlab="Time (days)", ylab="LAR", ylim=c(0,1))
axis(2)
axis(1, at=lagged_rates[,1], labels=c(1:nrow(lagged_rates)))
ncol(group_matrix)
#############2024
year = "2024"
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
select(reader_site2 , reduced_time, reader_pit,sex) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
select(reader_site2,reader_pit,start,end,sex)
#####2023
#set time_window for buffer zone around each read
time_window = 3
#species_list = c("rotundus", "mesoamericanus")
#year_list = c(2023,2024)
speciesa = "mesoamericanus"
year = "2024"
reads_filter = 1
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_site2 , reduced_time, reader_pit) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
dplyr:::select(reader_site2,reader_pit,start,end)
# Merge overlapping rows in the dataframe
species_merged_df <- merge_overlapping_rows(network_data)
species_merged_df$group <- paste0("group_", seq_along(species_merged_df$reader_site2))
species_groups = species_merged_df %>%
dplyr:::select(group , start, end, reader_site2)
#individual data
ind_data = reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_pit,reader_site2, reduced_time,sex)
# Merge the data
merged_data <- merge(species_groups, ind_data, by = "reader_site2", all.x = TRUE)
# Define a function to check if reduced_df falls within the range of start and end
is_in_range <- function(start, end, reduced_time) {
ifelse(is.na(start) | is.na(end) | is.na(reduced_time), FALSE, start <= reduced_time & reduced_time <= end)
}
# Add a logical column indicating if reduced_df falls between start and end
merged_data$within_range <- merged_data$reduced_time >= merged_data$start & merged_data$reduced_time <= merged_data$end
merged_data = merged_data %>% filter(within_range == TRUE)
# Get unique individuals and groups
individuals <- unique(merged_data$reader_pit)
groups <- unique(merged_data$group)
# Initialize the group_matrix with 0
group_matrix <- matrix(0, nrow = length(individuals), ncol = length(groups))
# Iterate through groups and individuals, fill group_matrix based on within_range condition
for (j in 1:length(groups)) {
group_data <- filter(merged_data, group == groups[j], within_range)
for (i in 1:length(individuals)) {
if (any(group_data$reader_pit == individuals[i])) {
group_matrix[i, j] <- 1
}
}
}
# Set row and column names
rownames(group_matrix) <- individuals
colnames(group_matrix) <- groups
group_matrix = t(group_matrix)
adj.m.2023=get_network(group_matrix, association_index="SRI")
assoc.species=graph_from_adjacency_matrix(adj.m.2023, "undirected", weighted=T) #create a graph object
visspecies <- toVisNetworkData(assoc.species )
# Grab nodes data frame.
nodes <- visspecies$nodes
# Grab edges data frame.
edges <- visspecies$edges
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
dplyr:::select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
nodes = left_join(nodes, sex_bz, by = 'id')
# Create color palette.
nodes$color <- ifelse(nodes$sex == 'm', 'blue', 'pink')
nodes = nodes %>%
dplyr:::select(id , label , color)%>%
distinct(id,label,color)
#925560
# Overwrite color column in nodes data frame
# with degree centrality color palette.
#nodes$color <- degreePal
## copy column "weight" to new column "value" in list "edges"
visspecies$edges$value <- visspecies$edges$weight
# Grab edges data frame.
edges <- visspecies$edges
# Plot.
visNetwork(nodes, edges) %>% visEdges(color = list(color = "black"))
#####2023
#set time_window for buffer zone around each read
time_window = 3
#species_list = c("rotundus", "mesoamericanus")
#year_list = c(2023,2024)
speciesa = "mutica"
year = "2024"
reads_filter = 1
#select the data to be included in the network
network_data<- reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_site2 , reduced_time, reader_pit) %>%
mutate(start = reduced_time - time_window) %>%
mutate(end = reduced_time + time_window) %>%
dplyr:::select(reader_site2,reader_pit,start,end)
# Merge overlapping rows in the dataframe
species_merged_df <- merge_overlapping_rows(network_data)
species_merged_df$group <- paste0("group_", seq_along(species_merged_df$reader_site2))
species_groups = species_merged_df %>%
dplyr:::select(group , start, end, reader_site2)
#individual data
ind_data = reduced_df %>%
filter(reader_sitetype == "trail")%>%
mutate(reader_year == year(reader_evening_of))%>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit) %>%
mutate(n_detections_ind = n_distinct(reader_evening_of)) %>%
filter(n_detections_ind >= reads_filter) %>%
ungroup() %>%
dplyr:::select(reader_pit,reader_site2, reduced_time,sex)
# Merge the data
merged_data <- merge(species_groups, ind_data, by = "reader_site2", all.x = TRUE)
# Define a function to check if reduced_df falls within the range of start and end
is_in_range <- function(start, end, reduced_time) {
ifelse(is.na(start) | is.na(end) | is.na(reduced_time), FALSE, start <= reduced_time & reduced_time <= end)
}
# Add a logical column indicating if reduced_df falls between start and end
merged_data$within_range <- merged_data$reduced_time >= merged_data$start & merged_data$reduced_time <= merged_data$end
merged_data = merged_data %>% filter(within_range == TRUE)
# Get unique individuals and groups
individuals <- unique(merged_data$reader_pit)
groups <- unique(merged_data$group)
# Initialize the group_matrix with 0
group_matrix <- matrix(0, nrow = length(individuals), ncol = length(groups))
# Iterate through groups and individuals, fill group_matrix based on within_range condition
for (j in 1:length(groups)) {
group_data <- filter(merged_data, group == groups[j], within_range)
for (i in 1:length(individuals)) {
if (any(group_data$reader_pit == individuals[i])) {
group_matrix[i, j] <- 1
}
}
}
# Set row and column names
rownames(group_matrix) <- individuals
colnames(group_matrix) <- groups
group_matrix = t(group_matrix)
adj.m.2023=get_network(group_matrix, association_index="SRI")
assoc.species=graph_from_adjacency_matrix(adj.m.2023, "undirected", weighted=T) #create a graph object
visspecies <- toVisNetworkData(assoc.species )
# Grab nodes data frame.
nodes <- visspecies$nodes
# Grab edges data frame.
edges <- visspecies$edges
sex_bz = reduced_df %>%
filter(species == speciesa) %>%
filter(reader_year == year) %>%
group_by(reader_pit)%>%
mutate(most_common_name = reader_pit[which.max(table(reader_pit))]) %>%
dplyr:::select(reader_pit , sex,reader_site2) %>%
rename("id" = "reader_pit") %>%
rename("location" = "reader_site2")%>%
distinct(id,sex)
nodes = left_join(nodes, sex_bz, by = 'id')
# Create color palette.
nodes$color <- ifelse(nodes$sex == 'm', 'blue', 'pink')
nodes = nodes %>%
dplyr:::select(id , label , color)%>%
distinct(id,label,color)
#925560
# Overwrite color column in nodes data frame
# with degree centrality color palette.
#nodes$color <- degreePal
## copy column "weight" to new column "value" in list "edges"
visspecies$edges$value <- visspecies$edges$weight
# Grab edges data frame.
edges <- visspecies$edges
# Plot.
visNetwork(nodes, edges) %>% visEdges(color = list(color = "black"))
